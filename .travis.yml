# Config file for automatic testing at travis-ci.org
env:
  global:
    - docker_repository=mlbench
language: python
python:
  - "3.6"
  - "3.7"
# Command to install dependencies, e.g. pip install -r requirements.txt --use-mirrors
install:
  - pip install -U tox-travis

# Command to run tests, e.g. python setup.py test
script:
  - tox
jobs:
  include:
    - stage: build docker
      language: bash
      sudo: required
      python: "3.6"
      services:
        - docker
      install: true

      before_script: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
      script:
        - docker build -f Docker/Dockerfile -t ${docker_repository}/mlbench_master:travis-ci-test .

    - stage: deploy develop
      if: branch = develop
      python: "3.6"
      language: bash
      services: docker
      before_install:
        - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
      before_script:
        - docker pull ${docker_repository}/mlbench_master:travis-ci-test
        - docker tag ${docker_repository}/mlbench_master:travis-ci-test ${docker_repository}/mlbench_master:develop
      script:
        - docker push ${docker_repository}/mlbench_master:develop

    - stage: deploy
      if: branch = master
      python: "3.6"
      language: bash
      services: docker
      before_install:
        - export MASTER_VERSION=$(awk '$1 == "__version__" { print $3; exit }' src/__init__.py)
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      before_script:
        - docker pull ${docker_repository}/mlbench_master:travis-ci-test
        - docker tag ${docker_repository}/mlbench_master:travis-ci-test ${docker_repository}/mlbench_master:latest
        - docker tag ${docker_repository}/mlbench_master:travis-ci-test ${docker_repository}/mlbench_master:${MASTER_VERSION}
      script:
        - docker push ${docker_repository}/mlbench_master:latest
        - docker push ${docker_repository}/mlbench_master:${MASTER_VERSION}


stages:
  - test
  - build docker
  - deploy develop
  - deploy